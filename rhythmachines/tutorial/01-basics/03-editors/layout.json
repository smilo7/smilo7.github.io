[
	{
		"drag": { "top": null, "left": null, "dragging": false },
		"resize": { "width": null, "height": null, "resizing": false },
		"responsive": { "valueW": 0 },
		"resizable": true,
		"draggable": true,
		"min": {},
		"max": {},
		"x": 0,
		"y": 0,
		"w": 8,
		"h": 3,
		"id": "_ont3g4uft",
		"type": "liveCodeEditor",
		"name": "hello-world_ti9ftly8u_ont3g4uft",
		"background": "#151515",
		"lineNumbers": true,
		"hasFocus": false,
		"theme": "icecoder",
    "data": "// LIVE CODE EDITOR \n\n// Press cmd-Enter [Mac] OR ctrl-Enter [Win/Linux] to evaluate this code and playback sound! \n\n:x:{{10}sin, {1000}sin}mul;\n>{:x:}mix;\n\n// Press cmd-. [Mac] OR ctrl-. [Win/Linux] to stop sound! ",
		"grammarSource": "/languages/default/grammar.ne",
		"liveCodeSource": "/languages/default/code.sem"
	},
	{
		"drag": { "top": null, "left": null, "dragging": false },
		"resize": { "width": null, "height": null, "resizing": false },
		"responsive": { "valueW": 0 },
		"static": false,
		"resizable": true,
		"draggable": true,
		"min": {},
		"max": {},
		"x": 8,
		"y": 0,
		"w": 7,
		"h": 6,
		"id": "_xgvh156eb",
		"name": "hello world_3cquz33zu_xgvh156eb",
		"type": "grammarEditor",
		"lineNumbers": true,
		"hasFocus": false,
		"theme": "monokai",
		"background": "#AAAAAA",
		"data": "# GRAMMAR EDITOR \n\n# Lexer [or tokenizer] definition with language lexemes [or tokens]\n@{%\n\nconst lexer = moo.compile({\n  separator:      /,/,\n  paramEnd:       /}/,\n  paramBegin:     /{/,\n  listEnd:        /\\]/,\n  listBegin:      /\\[/,\n  dacoutCh:       /\\>[0-9]+/,\n  dacout:         /\\>/,\n  variable:       /:[a-zA-Z0-9]+:/,\n  sample:         { match: /\\\\[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  slice:          { match: /\\|[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  stretch:        { match: /\\@[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  clockTrig:      /0t-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n\tnumber:         /-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n  semicolon:      /;/,\n  funcName:       /[a-zA-Z][a-zA-Z0-9]*/,\n\tstring:\t\t\t\t\t{ match: /'[a-zA-Z0-9]+'/, value: x => x.slice(1,x.length-1)},\n  comment:        /\\/\\/[^\\n]*/,\n  ws:             { match: /\\s+/, lineBreaks: true},\n});\n\n%}\n\n# Pass your lexer object using the @lexer option\n@lexer lexer\n\n# Grammar definition in the Extended Backus Naur Form (EBNF)\nmain -> _ Statement _\n{% d => ( { '@lang' : d[1] } )  %}\n\nStatement ->\n  %comment _ Statement\n  {% d => d[2] %}\n\t|\n  Expression _ %semicolon _ Statement\n  {% d => [ { '@spawn': d[0] } ].concat(d[4]) %}\n  |\n  Expression _ %semicolon (_ %comment):*\n  {% d => [ { '@spawn': d[0] } ] %}\n\t\n\nExpression ->\n  ParameterList _ %funcName\n  {% d => sema.synth( d[2].value, d[0]['@params'] ) %}\n  |\n  ParameterList _ %sample\n  {% d => sema.synth( 'sampler', d[0]['@params'].concat( [ sema.str( d[2] ) ] ) ) %}\n  |\n  ParameterList _ %slice\n  {% d => sema.synth( 'slice', d[0]['@params'].concat( [ sema.str( d[2] ) ] ) ) %}\n  |\n  ParameterList _ %stretch\n  {% d => sema.synth( 'stretch', d[0]['@params'].concat( [ sema.str( d[2] ) ] ) ) %}\n  |\n  %variable _ Expression\n  {% d => sema.setvar( d[0], d[2] ) %}\n  |\n  %dacout _ Expression\n  {% d => sema.synth( 'dac', [d[2]] ) %}\n  |\n  %dacoutCh _ Expression\n  {% d => sema.synth( 'dac', [d[2], sema.num(d[0].value.substr(1))] ) %}\n\nParameterList ->\n  %paramBegin Params %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': d[1], 'paramEnd': d[2] } ) %}\n\t|\n\t%paramBegin _ %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': [], 'paramEnd': d[2] } ) %}\n\n\nParams ->\n  ParamElement\n  {% d => ( [ d[0] ] ) %}\n  |\n  ParamElement _ %separator _ Params\n  {% d => [ d[0] ].concat(d[4]) %}\n\nParamElement ->\n  %number\n  {% d => ( { '@num': d[0] } ) %}\n\t|\n\t%string\n  {% d => ( { '@string': d[0] } ) %}\n  |\n  Expression\n  {% id %}\n  |\n  %variable\n  {% d => sema.getvar( d[0] ) %}\n  |\n  %listBegin Params  %listEnd\n  {% d => ( { '@list': d[1] } )%}\n\n\n# Whitespace\n\n_  -> wschar:*\n{% function(d) {return null;} %}\n\n__ -> wschar:+\n{% function(d) {return null;} %}\n\nwschar -> %ws\n{% id %}\n"
	},
  {
		"drag": { "dragging": false, "top": 0, "left": 0 },
		"resize": { "resizing": false, "width": 0, "height": 0 },
		"responsive": { "valueW": 0 },
		"resizable": true,
		"draggable": true,
		"min": {},
		"max": {},
		"x": 6,
		"y": 3,
		"w": 2,
		"h": 3,
		"id": "_nx9yneq25",
		"name": "hello world_au1enazhs_iwu2mp3lh_6l092dg1c_nx9yneq25",
		"type": "analyser",
		"lineNumbers": true,
		"hasFocus": false,
		"theme": "monokai",
		"background": "#f0f0f0",
		"mode": "both"
	},
	{
		"drag": { "top": null, "left": null, "dragging": false },
		"resize": { "width": null, "height": null, "resizing": false },
		"responsive": { "valueW": 0 },
		"static": false,
		"resizable": true,
		"draggable": true,
		"min": {},
		"max": {},
		"x": 0,
		"y": 3,
		"w": 6,
		"h": 3,
		"id": "_8ckws5her",
		"name": "hello world_8ckws5her",
		"type": "modelEditor",
		"lineNumbers": true,
		"hasFocus": false,
		"theme": "monokai",
		"background": "#f0f0f0",
		"data": "// MODEL EDITOR \n\n//js â€“ Bypass function input to output \n\n//route the test data into the model\ninput = (x, id) => {\n\tconsole.log(\">liveCode signal: \"+[id,x]);\n\toutput(x, 0)\n};\n"
	}
]
