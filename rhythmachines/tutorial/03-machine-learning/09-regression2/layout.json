[{
  "drag": {
    "top": null,
    "left": null,
    "dragging": false
  },
  "resize": {
    "width": null,
    "height": null,
    "resizing": false
  },
  "responsive": {
    "valueW": 0
  },
  "static": false,
  "resizable": true,
  "draggable": true,
  "min": {},
  "max": {},
  "x": 0,
  "y": 0,
  "w": 6,
  "h": 7,
  "id": "_iig58jm02",
  "type": "liveCodeEditor",
  "name": "hello-world",
  "background": "#151515",
  "lineNumbers": true,
  "hasFocus": false,
  "theme": "icecoder",
  "data": "",
  "grammarSource": "/languages/default/grammar.ne",
  "liveCodeSource": "/languages/default/code.sem",
  "grammar": "\n# Lexer [or tokenizer] definition with language lexemes [or tokens]\n@{%\n\nconst lexer = moo.compile({\n  separator:      /,/,\n  paramEnd:       /}/,\n  paramBegin:     /{/,\n  listEnd:        /\\]/,\n  listBegin:      /\\[/,\n  dacoutCh:       /\\>[0-9]+/,\n  dacout:         /\\>/,\n  variable:       /:[a-zA-Z0-9]+:/,\n  sample:         { match: /\\\\[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  slice:          { match: /\\|[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  stretch:        { match: /\\@[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  clockTrig:      /0t-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n\tnumber:         /-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n  semicolon:      /;/,\n  funcName:       /[a-zA-Z][a-zA-Z0-9]*/,\n\tstring:\t\t\t\t\t{ match: /'[a-zA-Z0-9]+'/, value: x => x.slice(1,x.length-1)},\n  comment:        /\\/\\/[^\\n]*/,\n  ws:             { match: /\\s+/, lineBreaks: true},\n});\n\n%}\n\n# Pass your lexer object using the @lexer option\n@lexer lexer\n\n# Grammar definition in the Extended Backus Naur Form (EBNF)\nmain -> _ Statement _\n{% d => ( { '@lang' : d[1] } )  %}\n\nStatement ->\n  %comment _ Statement\n  {% d => d[2] %}\n\t|\n  Expression _ %semicolon _ Statement\n  {% d => [ { '@spawn': d[0] } ].concat(d[4]) %}\n  |\n  Expression _ %semicolon (_ %comment):*\n  {% d => [ { '@spawn': d[0] } ] %}\n\n\nExpression ->\n  ParameterList _ %funcName\n  {% d => sema.synth( d[2].value, d[0]['@params'] ) %}\n  |\n  ParameterList _ %sample\n  {% d => sema.synth( 'sampler', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  ParameterList _ %slice\n  {% d => sema.synth( 'slice', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  ParameterList _ %stretch\n  {% d => sema.synth( 'stretch', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  %variable _ Expression\n  {% d => sema.setvar( d[0].value, d[2] ) %}\n  |\n  %dacout _ Expression\n  {% d => sema.synth( 'dac', [d[2]] ) %}\n  |\n  %dacoutCh _ Expression\n  {% d => sema.synth( 'dac', [d[2], sema.num(d[0].value.substr(1))] ) %}\n\nParameterList ->\n  %paramBegin Params %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': d[1], 'paramEnd': d[2] } ) %}\n\t|\n\t%paramBegin _ %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': [], 'paramEnd': d[2] } ) %}\n\n\nParams ->\n  ParamElement\n  {% d => ( [ d[0] ] ) %}\n  |\n  ParamElement _ %separator _ Params\n  {% d => [ d[0] ].concat(d[4]) %}\n\nParamElement ->\n  %number\n  {% d => ( { '@num': d[0] } ) %}\n\t|\n\t%string\n  {% d => ( { '@string': d[0].value } ) %}\n  |\n  Expression\n  {% id %}\n  |\n  %variable\n  {% d => sema.getvar( d[0].value ) %}\n  |\n  %listBegin Params  %listEnd\n  {% d => ( { '@list': d[1] } )%}\n\n\n# Whitespace\n\n_  -> wschar:*\n{% function(d) {return null;} %}\n\n__ -> wschar:+\n{% function(d) {return null;} %}\n\nwschar -> %ws\n{% id %}\n"
}, {
  "drag": {
    "top": null,
    "left": null,
    "dragging": false
  },
  "resize": {
    "resizing": false,
    "width": 0,
    "height": 0
  },
  "responsive": {
    "valueW": 0
  },
  "static": false,
  "resizable": true,
  "draggable": true,
  "min": {},
  "max": {},
  "x": 9,
  "y": 0,
  "w": 6,
  "h": 7,
  "id": "_0d8t7cuqh",
  "name": "hello world",
  "type": "modelEditor",
  "lineNumbers": true,
  "hasFocus": true,
  "theme": "monokai",
  "background": "#f0f0f0",
  "data": "//STEP 1: run this code to setup, or to start again\n\n//how many inputs from the LC window?\nvar numInputs = 1;\n//how many parameters are you controlling?\nvar numOutputs = 2;\n//the sizes of the middle layers - increase the size/complexity for more complex mappings\nvar structure = [30,30];\n//CPU or GPU?  set this to suit your machine / task\nvar useCPU = 1;\n//send info to the console?\nvar debug = 1;\n\n\ntf.setBackend(useCPU ? 'cpu' : 'webgl');\n\nvar currentInputs = new Array(numInputs);\nvar state = new Array(numOutputs);\n\n//modes for machine learning\nvar MLMODES = {NONE:0,TRAIN:1,PREDICT:2};\nvar mode = MLMODES.NONE;\n\n//setup channels to send data to LC\nvar outChannels = [];\nfor(let i=0; i < numOutputs; i++) {\n\toutChannels[i]= createOutputChannel(i, 1);\n}\n\n//a function to set data to the LC window\nfunction sendState(st) {\n\tfor(i in outChannels) {\n\t\toutChannels[i].send(st[i]);\n\t}\n}\n\n//record inputs\nvar sources = [];\n//record states as targets for the model\nvar targets = [];\n\nvar inputMap = {\n\t0:(x)=>{\n\t\t//record the inputs\n\t\tfor(let i=0; i < x.length; i++) {\n\t\t\tcurrentInputs[i] = x[i];\n\t\t}\n\t\t//record the mouse values\n\t\tif (mode == MLMODES.TRAIN) {\n\t\t\t//collect training data\n\t\t\tsources.push(Array.from(currentInputs));\t\n\t\t\ttargets.push(state);\n\t\t\t\n\t\t\tconsole.log(sources.length, \"samples collected\");\n\t\t}else if (mode == MLMODES.PREDICT) {\n\t\t\t//make a prediction from the model\n\t\t\tlet modelInput = tf.tensor2d(currentInputs,[1,currentInputs.length]);\n\t\t\tlet prediction = model.predict(modelInput).dataSync();\n\t\t\tsendState(prediction);\n\t\t\tif (debug) {\n\t\t\t\tconsole.log(currentInputs, prediction)\n\t\t\t}\n\t\t}\n\t},\n};\n\n//receive data from the LC window\ninput = (id,x) => {\n\tif (inputMap[id]) {\n\t\tinputMap[id](x);\n\t}\n};\n\n//this function generates a random list of numbers.We'll use it to explore the parameter space\nfunction randomList(n) {\n\tlet x = [];\n\tfor(let i=0; i < n; i++) x.push(Math.random());\n\treturn x;\n}\n\n_____\n\n\n\n//:::2::: EXPLORATION OF THE SYNTH\n\n//run this code block to randomise the parameters - repeat until you find a sound that you'd like to train as a target for the network\n//or specify the state manually: state = [x1,x2...]\nstate = randomList(numOutputs);\nsendState(state);\nstate\n___\n\n//:::3::: TRAINING DATA COLLECTION\n//3a: prepare your input for recording\n//:::3b::: run this block to collect data which will be mapped to your current state\nmode = MLMODES.TRAIN;\n___\n//:::3c::: run this block to stop collecting data\nmode = MLMODES.NONE;\n//:::3d:::repeat from step 2\n___\n\n\n_____\n//:::4::: MODEL CREATION\n\n//create a neural network model.\nvar model = tf.sequential();\n\nstructure.forEach((layerSize,i) => {\n\tmodel.add(tf.layers.dense({\n\t\tinputShape:i==0? [numInputs] : undefined,\n\t\tunits: layerSize,\n\t\tactivation: 'relu',\n\t\tkernelInitialiser: 'leCunNormal' }));\t\n});\n\nmodel.add(tf.layers.dense({ units: outChannels.length }));\nmodel.compile({ loss: 'meanSquaredError', optimizer: tf.train.adam() });\n\nmodel.summary();\n____\n\n//:::5::: DATA CONVERSION\n\n//Convert the data we've collected into the right format for tensorflow\nvar trainIn = tf.tensor2d(sources, [sources.length, numInputs]);\nvar trainOut = tf.tensor2d(targets, [targets.length, numOutputs]);\n\n____\n\n//:::6::: TRAINING\n//train the model.  You can repeat this step as desired until the loss is low enough\n\nfunction onBatchEnd (x, logs){console.log(x, logs)};\n\nmodel.fit(trainIn, trainOut, { epochs: 50, callbacks: {onBatchEnd} }).then(info => {console.log(info);});\n\n_____\n\n//:::7::: PREDICTION\n//now send the model some input\nmode = MLMODES.PREDICT;\n\n___\n//turn off prediction -> add training data? start again? \nmode = MLMODES.NONE;\n\n____\n\n"
}, {
  "drag": {
    "top": null,
    "left": null,
    "dragging": false
  },
  "resize": {
    "width": null,
    "height": null,
    "resizing": false
  },
  "responsive": {
    "valueW": 0
  },
  "static": false,
  "resizable": true,
  "draggable": true,
  "min": {},
  "max": {},
  "x": 6,
  "y": 2,
  "w": 3,
  "h": 5,
  "id": "_78x4p8n6u",
  "name": "hello world",
  "type": "liveCodeParseOutput",
  "lineNumbers": false,
  "hasFocus": false,
  "theme": "shadowfox",
  "background": "#ebdeff",
  "data": ""
}]
