[{
  "drag": {
    "top": null,
    "left": null,
    "dragging": false
  },
  "resize": {
    "width": null,
    "height": null,
    "resizing": false
  },
  "responsive": {
    "valueW": 0
  },
  "static": false,
  "resizable": true,
  "draggable": true,
  "min": {},
  "max": {},
  "x": 0,
  "y": 0,
  "w": 6,
  "h": 7,
  "id": "_um6xupnd2",
  "type": "liveCodeEditor",
  "name": "hello-world",
  "background": "#151515",
  "lineNumbers": true,
  "hasFocus": false,
  "theme": "icecoder",
  "data": "// Make sure the audio engine is ON (click on top right button with RED speaker) \n\n// Place the cursor on this panel \n\n// Press cmd-Enter [Mac] OR ctrl-Enter [Win/Linux] to evaluate this code and playback sound! \n\n:x:{{{{4}clp, [3,2]}rsq}\\909b,2,0.1}asymclip;\n:z:{{{8}clp,[1,0]}rsq}\\909closed;\n> {:x:,:z:}sum;\n\n// Press cmd-. [Mac] OR ctrl-. [Win/Linux] to stop sound! ",
  "grammarSource": "/languages/default/grammar.ne",
  "liveCodeSource": "/languages/default/code.sem",
  "grammar": "# GRAMMAR EDITOR\n\n# Lexer [or tokenizer] definition with language lexemes [or tokens]\n@{%\n\nconst lexer = moo.compile({\n  separator:      /,/,\n  paramEnd:       /}/,\n  paramBegin:     /{/,\n  listEnd:        /\\]/,\n  listBegin:      /\\[/,\n  dacoutCh:       /\\>[0-9]+/,\n  dacout:         /\\>/,\n  variable:       /:[a-zA-Z0-9]+:/,\n  sample:         { match: /\\\\[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  slice:          { match: /\\|[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  stretch:        { match: /\\@[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  clockTrig:      /0t-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n\tnumber:         /-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n  semicolon:      /;/,\n  funcName:       /[a-zA-Z][a-zA-Z0-9]*/,\n\tstring:\t\t\t\t\t{ match: /'[a-zA-Z0-9]+'/, value: x => x.slice(1,x.length-1)},\n  comment:        /\\/\\/[^\\n]*/,\n  ws:             { match: /\\s+/, lineBreaks: true},\n});\n\n%}\n\n# Pass your lexer object using the @lexer option\n@lexer lexer\n\n# Grammar definition in the Extended Backus Naur Form (EBNF)\nmain -> _ Statement _\n{% d => ( { '@lang' : d[1] } )  %}\n\nStatement ->\n  %comment _ Statement\n  {% d => d[2] %}\n\t|\n  Expression _ %semicolon _ Statement\n  {% d => [ { '@spawn': d[0] } ].concat(d[4]) %}\n  |\n  Expression _ %semicolon (_ %comment):*\n  {% d => [ { '@spawn': d[0] } ] %}\n\n\nExpression ->\n  ParameterList _ %funcName\n  {% d => sema.synth( d[2].value, d[0]['@params'] ) %}\n  |\n  ParameterList _ %sample\n  {% d => sema.synth( 'sampler', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  ParameterList _ %slice\n  {% d => sema.synth( 'slice', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  ParameterList _ %stretch\n  {% d => sema.synth( 'stretch', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  %variable _ Expression\n  {% d => sema.setvar( d[0].value, d[2] ) %}\n  |\n  %dacout _ Expression\n  {% d => sema.synth( 'dac', [d[2]] ) %}\n  |\n  %dacoutCh _ Expression\n  {% d => sema.synth( 'dac', [d[2], sema.num(d[0].value.substr(1))] ) %}\n\nParameterList ->\n  %paramBegin Params %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': d[1], 'paramEnd': d[2] } ) %}\n\t|\n\t%paramBegin _ %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': [], 'paramEnd': d[2] } ) %}\n\n\nParams ->\n  ParamElement\n  {% d => ( [ d[0] ] ) %}\n  |\n  ParamElement _ %separator _ Params\n  {% d => [ d[0] ].concat(d[4]) %}\n\nParamElement ->\n  %number\n  {% d => ( { '@num': d[0] } ) %}\n\t|\n\t%string\n  {% d => ( { '@string': d[0].value } ) %}\n  |\n  Expression\n  {% id %}\n  |\n  %variable\n  {% d => sema.getvar( d[0].value ) %}\n  |\n  %listBegin Params  %listEnd\n  {% d => ( { '@list': d[1] } )%}\n\n\n# Whitespace\n\n_  -> wschar:*\n{% function(d) {return null;} %}\n\n__ -> wschar:+\n{% function(d) {return null;} %}\n\nwschar -> %ws\n{% id %}\n"
}, {
  "drag": {
    "top": null,
    "left": null,
    "dragging": false
  },
  "resize": {
    "width": null,
    "height": null,
    "resizing": false
  },
  "responsive": {
    "valueW": 0
  },
  "static": false,
  "resizable": true,
  "draggable": true,
  "min": {},
  "max": {},
  "x": 6,
  "y": 0,
  "w": 3,
  "h": 2,
  "id": "_sd43lywsm",
  "name": "hello world",
  "type": "analyser",
  "lineNumbers": true,
  "hasFocus": false,
  "theme": "monokai",
  "background": "#f0f0f0",
  "mode": "both"
}, {
  "drag": {
    "top": null,
    "left": null,
    "dragging": false
  },
  "resize": {
    "width": null,
    "height": null,
    "resizing": false
  },
  "responsive": {
    "valueW": 0
  },
  "static": false,
  "resizable": true,
  "draggable": true,
  "min": {},
  "max": {},
  "x": 9,
  "y": 0,
  "w": 18,
  "h": 3,
  "id": "_vmeotxo9d",
  "name": "hello world",
  "type": "modelEditor",
  "lineNumbers": true,
  "hasFocus": false,
  "theme": "monokai",
  "background": "#f0f0f0",
  "data": "//js â€“ Linear model for regression (tfjs)\n\n//create the model\nvar model = tf.sequential();\nmodel.add(tf.layers.dense({ units: 1, inputShape: [1] }));\nmodel.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\n\n//set up the training data set\nvar xs = tf.tensor2d([0, 1, 2, 3, 4, 5], [6, 1]);\nvar ys = tf.tensor2d([0, 50, 100, 150, 200, 250], [6, 1]);\n\n//train the model on the data set\nmodel.fit(xs, ys, { epochs: 150 }).then(result => {console.log(`DEBUG:ml.model: Model trained`); console.dir(result)});\n\n//defining the callback for testing the model on new data\nvar test = (x) => { return model.predict(tf.tensor2d([x], [1, 1])).dataSync()[0]; }\n__________\n\n//route the test data into the model\nvar w = 0;\ninput = (x, id) => {\n\tconsole.log(\">toModel: \"+[id,x]);\n\tlet prediction = test(x);\n\tconsole.log('pred: ',prediction);\n\toutput(prediction, 0)\n};\n"
}, {
  "drag": {
    "top": null,
    "left": null,
    "dragging": false
  },
  "resize": {
    "width": null,
    "height": null,
    "resizing": false
  },
  "responsive": {
    "valueW": 0
  },
  "static": false,
  "resizable": true,
  "draggable": true,
  "min": {},
  "max": {},
  "x": 6,
  "y": 2,
  "w": 3,
  "h": 5,
  "id": "_qh7bfva8a",
  "name": "hello world",
  "type": "liveCodeParseOutput",
  "lineNumbers": false,
  "hasFocus": false,
  "theme": "shadowfox",
  "background": "#ebdeff",
  "data": ""
}, {
  "drag": {
    "dragging": false,
    "top": 0,
    "left": 0
  },
  "resize": {
    "resizing": false,
    "width": 0,
    "height": 0
  },
  "responsive": {
    "valueW": 0
  },
  "static": false,
  "resizable": true,
  "draggable": true,
  "min": {},
  "max": {},
  "x": 0,
  "y": 2,
  "w": 8,
  "h": 5,
  "id": "_b3h0xo9u2",
  "name": "hello world",
  "type": "grammarEditor",
  "lineNumbers": true,
  "hasFocus": true,
  "theme": "monokai",
  "background": "#AAAAAA",
  "data": "\n# Lexer [or tokenizer] definition with language lexemes [or tokens]\n\n@{%\n\n\tconst lexer = moo.compile({\n\t\tseparator: \t/,/,\n\t\tparamEnd:  \t/}/,\n\t\tparamBegin:\t/{/,\n\t\tlistEnd:   \t/\\]/,\n\t\tlistBegin: \t/\\[/,\n\t\tdacoutCh:  \t/\\>[0-9]+/,\n\t\tdacout:    \t/\\>/,\n\t\tvariable:  \t/:[a-zA-Z0-9]+:/,\n\t\tsample:    \t{ match: /\\\\[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n\t\tslice:     \t{ match: /\\|[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n\t\tstretch:   \t{ match: /\\@[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n\t\tclockTrig: \t/0t-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n\t\tnumber:    \t/-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n\t\tsemicolon: \t/;/,\n\t\tfuncName:  \t/[a-zA-Z][a-zA-Z0-9]*/,\n\t\tstring:\t\t\tmatch: /'[a-zA-Z0-9]+'/, value: x => x.slice(1,x.length-1)},\n\t\tcomment:   \t/\\/\\/[^\\n]*/,\n\t\tws:        \t{ match: /\\s+/, lineBreaks: true},\n\t});\n\n%}\n\n# Pass your lexer object using the @lexer option\n@lexer lexer\n\n# Grammar definition in the Extended Backus Naur Form (EBNF)\nmain -> _ Statement _\n{% d => ( { '@lang' : d[1] } )  %}\n\nStatement ->\n  %comment _ Statement\n  {% d => d[2] %}\n\t|\n  Expression _ %semicolon _ Statement\n  {% d => [ { '@spawn': d[0] } ].concat(d[4]) %}\n  |\n  Expression _ %semicolon (_ %comment):*\n  {% d => [ { '@spawn': d[0] } ] %}\n\n\nExpression ->\n  ParameterList _ %funcName\n  {% d => sema.synth( d[2].value, d[0]['@params'] ) %}\n  |\n  ParameterList _ %sample\n  {% d => sema.synth( 'sampler', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  ParameterList _ %slice\n  {% d => sema.synth( 'slice', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  ParameterList _ %stretch\n  {% d => sema.synth( 'stretch', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  %variable _ Expression\n  {% d => sema.setvar( d[0].value, d[2] ) %}\n  |\n  %dacout _ Expression\n  {% d => sema.synth( 'dac', [d[2]] ) %}\n  |\n  %dacoutCh _ Expression\n  {% d => sema.synth( 'dac', [d[2], sema.num(d[0].value.substr(1))] ) %}\n\nParameterList ->\n  %paramBegin Params %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': d[1], 'paramEnd': d[2] } ) %}\n\t|\n\t%paramBegin _ %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': [], 'paramEnd': d[2] } ) %}\n\n\nParams ->\n  ParamElement\n  {% d => ( [ d[0] ] ) %}\n  |\n  ParamElement _ %separator _ Params\n  {% d => [ d[0] ].concat(d[4]) %}\n\nParamElement ->\n  %number\n  {% d => ( { '@num': d[0] } ) %}\n\t|\n\t%string\n  {% d => ( { '@string': d[0].value } ) %}\n  |\n  Expression\n  {% id %}\n  |\n  %variable\n  {% d => sema.getvar( d[0].value ) %}\n  |\n  %listBegin Params  %listEnd\n  {% d => ( { '@list': d[1] } )%}\n\n\n# Whitespace\n\n_  -> wschar:*\n{% function(d) {return null;} %}\n\n__ -> wschar:+\n{% function(d) {return null;} %}\n\nwschar -> %ws\n{% id %}\n",
  "grammarSource": "/languages/default/grammar.ne"
}, {
  "drag": {
    "top": null,
    "left": null,
    "dragging": false
  },
  "resize": {
    "width": null,
    "height": null,
    "resizing": false
  },
  "responsive": {
    "valueW": 0
  },
  "static": false,
  "resizable": true,
  "draggable": true,
  "min": {},
  "max": {},
  "x": 9,
  "y": 6,
  "w": 18,
  "h": 1,
  "id": "_6v0tfjvav",
  "name": "hello world",
  "type": "grammarCompileOutput",
  "lineNumbers": true,
  "hasFocus": false,
  "theme": "monokai",
  "background": "#d1d5ff",
  "data": ""
}]