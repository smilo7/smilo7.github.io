!function(n){var e={};function a(t){if(e[t])return e[t].exports;var s=e[t]={i:t,l:!1,exports:{}};return n[t].call(s.exports,s,s.exports,a),s.l=!0,s.exports}a.m=n,a.c=e,a.d=function(n,e,t){a.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,e){if(1&e&&(n=a(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var s in n)a.d(t,s,function(e){return n[e]}.bind(null,s));return t},a.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="/",a(a.s=0)}([function(n,e,a){"use strict";importScripts("https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"),importScripts("./lalolib.js"),importScripts("./svd.js"),importScripts("./mlworkerscripts.js");var t=eval;t("var input = (value, channel) => {}"),t("var output = (value,channel) => {postMessage({func:'data', val:value, ch:channel});}"),t('\n\nvar outputSABs = {};\nclass MLSABOutputTransducer {\n  constructor(bufferType, channel, blocksize) {\n    this.channel = channel;\n    this.blocksize = blocksize;\n\n    //check for existing channels\n    if (channel in outputSABs && outputSABs[channel].blocksize == blocksize) {\n      //reuse existing\n      this.ringbuf = outputSABs[channel].rb;\n    }else{\n      //create a new SAB and notify the receiver\n      this.sab = RingBuffer.getStorageForCapacity(32 * blocksize, Float64Array);\n      this.ringbuf = new RingBuffer(this.sab, Float64Array);\n      outputSABs[channel] = {rb:this.ringbuf, sab:this.sab, created:Date.now(), blocksize:blocksize};\n\n      postMessage({\n        func: \'sab\',\n        value: this.sab,\n        ttype: bufferType,\n        channelID: channel,\n        blocksize:blocksize\n      });\n    }\n  }\n\n  send(value) {\n    if (this.ringbuf.available_write() > 1) {\n      if (typeof(value) == "number") {\n        this.ringbuf.push(new Float64Array([value]));\n      }else{\n        if (value.length == this.blocksize) {\n          this.ringbuf.push(value);\n        }else if (value.length < this.blocksize) {\n          let newVal = new Float64Array(this.blocksize);\n          for(let i in value) newVal[i] = value[i];\n          this.ringbuf.push(newVal);\n        }else{\n          this.ringbuf.push(value.slice(0,this.blocksize));\n        }\n      }\n    }\n  }\n\n}\n\nvar createOutputChannel = (id, blocksize) => {\n  return new MLSABOutputTransducer(\'ML\', id, blocksize);\n};\nvar loadResponders = {};\nvar inputSABs={};\nvar sema = {\n  saveF32Array: (name, val) => {\n    postMessage({\n      "func": "save",\n      "name": name,\n      "val": val\n    });\n    return 0;\n  },\n  loadF32Array: (name, onload) => {\n    postMessage({\n      "func": "load",\n      "name": name,\n    });\n    loadResponders[name] = onload;\n    return 0;\n  },\n  download: (name) => {\n    postMessage({\n      "func": "download",\n      "name": name,\n    });\n  },\n  sendCode: (code) => {\n    postMessage({\n      "func": "sendcode",\n      "code": code,\n    });\n  },\n  pbcopy: (msg) => {\n    postMessage({\n      "func": "pbcopy",\n      "msg": msg,\n    });\n  },\n  sendBuffer: (bufferName,data) => {\n      postMessage({\n          "func": "sendbuf",\n          "name": bufferName,\n          "data": data\n      });\n  },\n  env: {\n    saveLocal: (name) => {\n      postMessage({\n            "func": "envsave",\n            "name": name,\n            "storage":"local"\n        }\n      )\n    },\n    loadLocal: (name) => {\n      postMessage({\n            "func": "envload",\n            "name": name,\n            "storage":"local"\n        }\n      )\n    },\n    saveToPB: () => {\n      postMessage({\n            "func": "envsave",\n            "storage":"pastebuffer"\n        }\n      )\n    },\n    loadGist: (gistid) => {\n      postMessage({\n            "func": "envload",\n            "name": gistid,\n            "storage":"gist"\n        }\n      )\n    },\n\n  },\n  //run in the DOM\n  domeval: (code) => {\n    postMessage({\n          "func": "domeval",\n          "code": code,\n      }\n    )\n  },\n  peerinfo: () => {\n    postMessage ({\n      "func": "peerinfo"\n    });\n    console.log("Your peer ID has been copied to the paste buffer")\n  }\n};\n'),onmessage=n=>{if(void 0!==n.data.eval)try{let e=t(n.data.eval);console.log(e)}catch(e){console.log(`Code eval exception: ${e} `,n.data.eval)}else if("val"in n.data){let e=n.data.val;e=JSON.parse(`[${e}]`),loadResponders[n.data.name](e),delete loadResponders[n.data.name]}else if("model-input-data"===n.data.type)input(n.data.value,n.data.ch);else if("model-input-buffer"===n.data.type){console.log("buf received",n);let e=n.data.value,a=new RingBuffer(e,Float64Array);inputSABs[n.data.channelID]={sab:e,rb:a,blocksize:n.data.blocksize},console.log("ML",inputSABs)}},function n(){try{for(let n in inputSABs){let e=inputSABs[n].rb.available_read();if(e!=inputSABs[n].rb.capacity&&e>0)for(let a=0;a<e;a+=inputSABs[n].blocksize){let e=new Float64Array(inputSABs[n].blocksize);inputSABs[n].rb.pop(e),input(n,e)}}setTimeout(n,20)}catch(e){setTimeout(n,100)}}()}]);